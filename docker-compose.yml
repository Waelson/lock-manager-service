version: '3.9'

services:
  postgres:
    image: postgres:15
    container_name: order_service_postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: inventory_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./projects/order-service-api/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - redis-network

  order-service-api:
    container_name: order_service_api
    build:
      context: ./projects/order-service-api
      dockerfile: Dockerfile
    ports:
      - '9090:9090'
    depends_on:
      - lock-manager-api
      - postgres
    environment:
      LOCK_SERVICE_URL: "http://lock-manager-api:8181"
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "inventory_db"
    networks:
      - redis-network

  lock-manager-api:
    container_name: lock_manager_api
    build:
      context: ./projects/lock-manager-api
      dockerfile: Dockerfile
    ports:
      - '8181:8181'
    depends_on:
      - redis1
      - redis2
      - redis3
    environment:
      REDIS_ADDRESSES: "redis1:6379,redis2:6379,redis3:6379"
    networks:
      - redis-network

  redis1:
    image: redis:latest
    container_name: redis1
    ports:
      - "6379:6379"
    command: ["redis-server", "--port", "6379"]
    networks:
      - redis-network

  redis2:
    image: redis:latest
    container_name: redis2
    ports:
      - "6380:6379"
    command: ["redis-server", "--port", "6379"]
    networks:
      - redis-network

  redis3:
    image: redis:latest
    container_name: redis3
    ports:
      - "6381:6379"
    command: ["redis-server", "--port", "6379"]
    networks:
      - redis-network

networks:
  redis-network:
    driver: bridge

volumes:
  postgres_data: